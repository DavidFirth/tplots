% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/tetraplot.R
\name{tetraplot}
\alias{tetraplot}
\title{Make a tetraplot grob}
\usage{
tetraplot(
  nby4,
  neg_action = "warning",
  perm = 1:4,
  type = "top3",
  scale = 1.1,
  vertex_labels = colnames(nby4),
  labels_gp = grid::gpar(),
  points_gp = grid::gpar(),
  thirds = NULL,
  thirds_gp = grid::gpar(),
  ...
)
}
\arguments{
\item{nby4}{a 4-column numeric matrix.  Each row represents one point to be plotted.  Rows will be scaled to sum to 1 before plotting, so no row can contain only zeros.}

\item{neg_action}{a character string, either \code{"warning"} or \code{"error"}; or \code{NULL} if no checking of negative values is wanted.  This provides optional checking for negative values in the \code{nby4} matrix.}

\item{perm}{a permutation of the integers \code{1:4}, to specify which face relates to which columns of the \code{nby4} matrix.  The first 3 elements of the permitation will be the colunns used for the corner face, and the other faces follow from that.}

\item{type}{currently always \code{"top3"}, meaning that each point is displayed in the face that corresponds to its 3 largest components (or the first such face in the event of a tie).}

\item{scale}{a scalar to specify by what factor each ternary face should be scaled down.}

\item{vertex_labels}{either a vector of 4 text labels for the vertices of the ternary faces, or \code{NULL}.}

\item{labels_gp}{graphical parameters for vertex labels, specified via \code{grid::gpar()}.}

\item{points_gp}{graphical parameters for \code{ternary_points()}, specified via \code{grid::gpar()}.}

\item{thirds}{either \code{NULL} or a 4-vector of background colours to be used in calls to \code{ternary_thirds()}.}

\item{thirds_gp}{other graphical parameters for \code{ternary_thirds()}, specified via \code{grid::gpar()}}

\item{...}{other arguments to pass to the viewport/grob constructor functions.}
}
\value{
a grob of class \code{gTree}.
}
\description{
The four faces of a tetrahedron are used in order to display 4-part compositions.
}
\details{
??
}
\examples{

data(UK_GE_2024)

## Focus on the top 4 parties in terms of vote shares in England
parties <- c("Con", "Lab", "LD", "RUK")
England <- UK_GE_2024[UK_GE_2024 $ Country.name == "England",
                      c("Constituency.name", "Country.name", "First.party", parties)]
row.names(England) <- England $ Constituency.name
## Remove the Speaker's seat
England <- England[rownames(England) != "Chorley", ]
## Sort the rows so that seats won by main parties will get plotted first
England <- England[order(match(England $ First.party,
                               c("Con", "Lab", "LD", "RUK", "Green", "Ind"))), ]

## Focus on the vote shares across the top 4 parties
England_four_party_shares <- England[, parties[1:4]]
England_four_party_shares <- round(
    100 * England_four_party_shares / rowSums(England_four_party_shares),
    2)
England_four_party_shares <- as.matrix(England_four_party_shares)

## Set up coloured backgrounds
paleLD <- "#fddba3"
palered <- "#FFcccc"
paleblue <- "#a8ddff"
palecyan <- "#cbf4fa"
party_backgrounds <- c(paleblue, palered, paleLD, palecyan)

## Set up colours for the plotted points
winner_names <- c("Con", "Lab", "LD", "RUK", "Green", "Ind")
winner_colours <- c("#0087DC", "#E4003B", "#FAA61A", "cyan", "limegreen", "white")
names(winner_colours) <- winner_names
point_colours <- winner_colours[England $ First.party]

## Draw the tetraplot
the_plot <- tetraplot(England_four_party_shares,
                      perm = c(2, 4, 1, 3),
                      labels_gp = grid::gpar(fontsize = 14),
                      thirds = party_backgrounds,
                      thirds_gp = grid::gpar(col = "transparent"),
                      points_gp = grid::gpar(fill = point_colours),
                      pch = 21, size = grid::unit(0.6, "char"))

## Make the legend
legend_vp <- grid::viewport(x = 0.85, y = 0.4, width = 0.15, height = 0.2)
legend <- grid::gList(
    grid::legendGrob(paste(winner_names, "won"), pch = 21, vgap = 0.8,
               gp = grid::gpar(fill = winner_colours), vp = legend_vp),
    grid::rectGrob(vp = legend_vp))

## Make some other text to use
headlines <- grid::gList(
    grid::textGrob("England", gp = grid::gpar(fontsize = 50), just = "right",
                  vp = grid::viewport(x = 0.95, y = 0.2, width = 0.5, height = 0.2)),
    grid::textGrob("542 constituencies", gp = grid::gpar(fontsize = 20), just = "right",
                  vp = grid::viewport(x = 0.949, y = 0.14, width = 0.5, height = 0.2)),
    grid::textGrob("(excludes the Speaker's seat)", gp = grid::gpar(fontsize = 14), just = "right",
             vp = grid::viewport(x = 0.949, y = 0.11, width = 0.5, height = 0.2))
)
## Finally, draw everything on the current graphics device
tplot_new(scale = 1.1, corner = c(0, 1))
grid::grid.draw(the_plot)
grid::grid.draw(legend)
grid::grid.draw(headlines)

}
